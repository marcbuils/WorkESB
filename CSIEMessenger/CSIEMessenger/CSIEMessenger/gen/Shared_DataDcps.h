//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: Shared_DataDcps.h
//  Source: gen/Shared_DataDcps.idl
//  Generated: Wed Dec 28 14:17:29 2011
//  OpenSplice V5.4.1OSS
//  
//******************************************************************
#ifndef _SHARED_DATADCPS_H_
#define _SHARED_DATADCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps_interfaces.h"
#include "dds_builtinTopics.h"
#include "dds_dcps_builtintopics.h"
#include "Shared_Data.h"

namespace Shared_Data
{
   struct DDS_int;
   struct DDS_float;
   struct DDS_string;

   class DDS_intTypeSupportInterface;

   typedef DDS_intTypeSupportInterface * DDS_intTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < DDS_intTypeSupportInterface> DDS_intTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < DDS_intTypeSupportInterface> DDS_intTypeSupportInterface_out;


   class DDS_intDataWriter;

   typedef DDS_intDataWriter * DDS_intDataWriter_ptr;
   typedef DDS_DCPSInterface_var < DDS_intDataWriter> DDS_intDataWriter_var;
   typedef DDS_DCPSInterface_out < DDS_intDataWriter> DDS_intDataWriter_out;


   class DDS_intDataReader;

   typedef DDS_intDataReader * DDS_intDataReader_ptr;
   typedef DDS_DCPSInterface_var < DDS_intDataReader> DDS_intDataReader_var;
   typedef DDS_DCPSInterface_out < DDS_intDataReader> DDS_intDataReader_out;


   class DDS_intDataReaderView;

   typedef DDS_intDataReaderView * DDS_intDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < DDS_intDataReaderView> DDS_intDataReaderView_var;
   typedef DDS_DCPSInterface_out < DDS_intDataReaderView> DDS_intDataReaderView_out;


   class DDS_floatTypeSupportInterface;

   typedef DDS_floatTypeSupportInterface * DDS_floatTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < DDS_floatTypeSupportInterface> DDS_floatTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < DDS_floatTypeSupportInterface> DDS_floatTypeSupportInterface_out;


   class DDS_floatDataWriter;

   typedef DDS_floatDataWriter * DDS_floatDataWriter_ptr;
   typedef DDS_DCPSInterface_var < DDS_floatDataWriter> DDS_floatDataWriter_var;
   typedef DDS_DCPSInterface_out < DDS_floatDataWriter> DDS_floatDataWriter_out;


   class DDS_floatDataReader;

   typedef DDS_floatDataReader * DDS_floatDataReader_ptr;
   typedef DDS_DCPSInterface_var < DDS_floatDataReader> DDS_floatDataReader_var;
   typedef DDS_DCPSInterface_out < DDS_floatDataReader> DDS_floatDataReader_out;


   class DDS_floatDataReaderView;

   typedef DDS_floatDataReaderView * DDS_floatDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < DDS_floatDataReaderView> DDS_floatDataReaderView_var;
   typedef DDS_DCPSInterface_out < DDS_floatDataReaderView> DDS_floatDataReaderView_out;


   class DDS_stringTypeSupportInterface;

   typedef DDS_stringTypeSupportInterface * DDS_stringTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < DDS_stringTypeSupportInterface> DDS_stringTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < DDS_stringTypeSupportInterface> DDS_stringTypeSupportInterface_out;


   class DDS_stringDataWriter;

   typedef DDS_stringDataWriter * DDS_stringDataWriter_ptr;
   typedef DDS_DCPSInterface_var < DDS_stringDataWriter> DDS_stringDataWriter_var;
   typedef DDS_DCPSInterface_out < DDS_stringDataWriter> DDS_stringDataWriter_out;


   class DDS_stringDataReader;

   typedef DDS_stringDataReader * DDS_stringDataReader_ptr;
   typedef DDS_DCPSInterface_var < DDS_stringDataReader> DDS_stringDataReader_var;
   typedef DDS_DCPSInterface_out < DDS_stringDataReader> DDS_stringDataReader_out;


   class DDS_stringDataReaderView;

   typedef DDS_stringDataReaderView * DDS_stringDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < DDS_stringDataReaderView> DDS_stringDataReaderView_var;
   typedef DDS_DCPSInterface_out < DDS_stringDataReaderView> DDS_stringDataReaderView_out;

   struct DDS_intSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < DDS_int, struct DDS_intSeq_uniq_> DDS_intSeq;
   typedef DDS_DCPSSequence_var < DDS_intSeq> DDS_intSeq_var;
   typedef DDS_DCPSSequence_out < DDS_intSeq> DDS_intSeq_out;
   class DDS_intTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef DDS_intTypeSupportInterface_ptr _ptr_type;
      typedef DDS_intTypeSupportInterface_var _var_type;

      static DDS_intTypeSupportInterface_ptr _duplicate (DDS_intTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static DDS_intTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static DDS_intTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static DDS_intTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      DDS_intTypeSupportInterface_ptr _this () { return this; }


   protected:
      DDS_intTypeSupportInterface () {};
      ~DDS_intTypeSupportInterface () {};
   private:
      DDS_intTypeSupportInterface (const DDS_intTypeSupportInterface &);
      DDS_intTypeSupportInterface & operator = (const DDS_intTypeSupportInterface &);
   };

   class DDS_intDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef DDS_intDataWriter_ptr _ptr_type;
      typedef DDS_intDataWriter_var _var_type;

      static DDS_intDataWriter_ptr _duplicate (DDS_intDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static DDS_intDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static DDS_intDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static DDS_intDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      DDS_intDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const DDS_int& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const DDS_int& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const DDS_int& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const DDS_int& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const DDS_int& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const DDS_int& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const DDS_int& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const DDS_int& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const DDS_int& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const DDS_int& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (DDS_int& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const DDS_int& instance_data) = 0;

   protected:
      DDS_intDataWriter () {};
      ~DDS_intDataWriter () {};
   private:
      DDS_intDataWriter (const DDS_intDataWriter &);
      DDS_intDataWriter & operator = (const DDS_intDataWriter &);
   };

   class DDS_intDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef DDS_intDataReader_ptr _ptr_type;
      typedef DDS_intDataReader_var _var_type;

      static DDS_intDataReader_ptr _duplicate (DDS_intDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static DDS_intDataReader_ptr _narrow (DDS::Object_ptr obj);
      static DDS_intDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static DDS_intDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      DDS_intDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (DDS_int& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (DDS_int& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (DDS_int& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const DDS_int& instance) = 0;

   protected:
      DDS_intDataReader () {};
      ~DDS_intDataReader () {};
   private:
      DDS_intDataReader (const DDS_intDataReader &);
      DDS_intDataReader & operator = (const DDS_intDataReader &);
   };

   class DDS_intDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef DDS_intDataReaderView_ptr _ptr_type;
      typedef DDS_intDataReaderView_var _var_type;

      static DDS_intDataReaderView_ptr _duplicate (DDS_intDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static DDS_intDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static DDS_intDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static DDS_intDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      DDS_intDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (DDS_int& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (DDS_int& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (DDS_intSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (DDS_int& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const DDS_int& instance) = 0;

   protected:
      DDS_intDataReaderView () {};
      ~DDS_intDataReaderView () {};
   private:
      DDS_intDataReaderView (const DDS_intDataReaderView &);
      DDS_intDataReaderView & operator = (const DDS_intDataReaderView &);
   };

   struct DDS_floatSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < DDS_float, struct DDS_floatSeq_uniq_> DDS_floatSeq;
   typedef DDS_DCPSSequence_var < DDS_floatSeq> DDS_floatSeq_var;
   typedef DDS_DCPSSequence_out < DDS_floatSeq> DDS_floatSeq_out;
   class DDS_floatTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef DDS_floatTypeSupportInterface_ptr _ptr_type;
      typedef DDS_floatTypeSupportInterface_var _var_type;

      static DDS_floatTypeSupportInterface_ptr _duplicate (DDS_floatTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static DDS_floatTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static DDS_floatTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static DDS_floatTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      DDS_floatTypeSupportInterface_ptr _this () { return this; }


   protected:
      DDS_floatTypeSupportInterface () {};
      ~DDS_floatTypeSupportInterface () {};
   private:
      DDS_floatTypeSupportInterface (const DDS_floatTypeSupportInterface &);
      DDS_floatTypeSupportInterface & operator = (const DDS_floatTypeSupportInterface &);
   };

   class DDS_floatDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef DDS_floatDataWriter_ptr _ptr_type;
      typedef DDS_floatDataWriter_var _var_type;

      static DDS_floatDataWriter_ptr _duplicate (DDS_floatDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static DDS_floatDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static DDS_floatDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static DDS_floatDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      DDS_floatDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const DDS_float& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const DDS_float& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const DDS_float& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const DDS_float& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const DDS_float& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const DDS_float& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const DDS_float& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const DDS_float& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const DDS_float& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const DDS_float& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (DDS_float& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const DDS_float& instance_data) = 0;

   protected:
      DDS_floatDataWriter () {};
      ~DDS_floatDataWriter () {};
   private:
      DDS_floatDataWriter (const DDS_floatDataWriter &);
      DDS_floatDataWriter & operator = (const DDS_floatDataWriter &);
   };

   class DDS_floatDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef DDS_floatDataReader_ptr _ptr_type;
      typedef DDS_floatDataReader_var _var_type;

      static DDS_floatDataReader_ptr _duplicate (DDS_floatDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static DDS_floatDataReader_ptr _narrow (DDS::Object_ptr obj);
      static DDS_floatDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static DDS_floatDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      DDS_floatDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (DDS_float& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (DDS_float& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (DDS_float& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const DDS_float& instance) = 0;

   protected:
      DDS_floatDataReader () {};
      ~DDS_floatDataReader () {};
   private:
      DDS_floatDataReader (const DDS_floatDataReader &);
      DDS_floatDataReader & operator = (const DDS_floatDataReader &);
   };

   class DDS_floatDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef DDS_floatDataReaderView_ptr _ptr_type;
      typedef DDS_floatDataReaderView_var _var_type;

      static DDS_floatDataReaderView_ptr _duplicate (DDS_floatDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static DDS_floatDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static DDS_floatDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static DDS_floatDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      DDS_floatDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (DDS_float& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (DDS_float& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (DDS_floatSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (DDS_float& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const DDS_float& instance) = 0;

   protected:
      DDS_floatDataReaderView () {};
      ~DDS_floatDataReaderView () {};
   private:
      DDS_floatDataReaderView (const DDS_floatDataReaderView &);
      DDS_floatDataReaderView & operator = (const DDS_floatDataReaderView &);
   };

   struct DDS_stringSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < DDS_string, struct DDS_stringSeq_uniq_> DDS_stringSeq;
   typedef DDS_DCPSSequence_var < DDS_stringSeq> DDS_stringSeq_var;
   typedef DDS_DCPSSequence_out < DDS_stringSeq> DDS_stringSeq_out;
   class DDS_stringTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef DDS_stringTypeSupportInterface_ptr _ptr_type;
      typedef DDS_stringTypeSupportInterface_var _var_type;

      static DDS_stringTypeSupportInterface_ptr _duplicate (DDS_stringTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static DDS_stringTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static DDS_stringTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static DDS_stringTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      DDS_stringTypeSupportInterface_ptr _this () { return this; }


   protected:
      DDS_stringTypeSupportInterface () {};
      ~DDS_stringTypeSupportInterface () {};
   private:
      DDS_stringTypeSupportInterface (const DDS_stringTypeSupportInterface &);
      DDS_stringTypeSupportInterface & operator = (const DDS_stringTypeSupportInterface &);
   };

   class DDS_stringDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef DDS_stringDataWriter_ptr _ptr_type;
      typedef DDS_stringDataWriter_var _var_type;

      static DDS_stringDataWriter_ptr _duplicate (DDS_stringDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static DDS_stringDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static DDS_stringDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static DDS_stringDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      DDS_stringDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const DDS_string& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const DDS_string& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const DDS_string& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const DDS_string& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const DDS_string& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const DDS_string& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const DDS_string& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const DDS_string& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const DDS_string& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const DDS_string& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (DDS_string& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const DDS_string& instance_data) = 0;

   protected:
      DDS_stringDataWriter () {};
      ~DDS_stringDataWriter () {};
   private:
      DDS_stringDataWriter (const DDS_stringDataWriter &);
      DDS_stringDataWriter & operator = (const DDS_stringDataWriter &);
   };

   class DDS_stringDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef DDS_stringDataReader_ptr _ptr_type;
      typedef DDS_stringDataReader_var _var_type;

      static DDS_stringDataReader_ptr _duplicate (DDS_stringDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static DDS_stringDataReader_ptr _narrow (DDS::Object_ptr obj);
      static DDS_stringDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static DDS_stringDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      DDS_stringDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (DDS_string& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (DDS_string& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (DDS_string& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const DDS_string& instance) = 0;

   protected:
      DDS_stringDataReader () {};
      ~DDS_stringDataReader () {};
   private:
      DDS_stringDataReader (const DDS_stringDataReader &);
      DDS_stringDataReader & operator = (const DDS_stringDataReader &);
   };

   class DDS_stringDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef DDS_stringDataReaderView_ptr _ptr_type;
      typedef DDS_stringDataReaderView_var _var_type;

      static DDS_stringDataReaderView_ptr _duplicate (DDS_stringDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static DDS_stringDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static DDS_stringDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static DDS_stringDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      DDS_stringDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (DDS_string& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (DDS_string& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (DDS_stringSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (DDS_string& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const DDS_string& instance) = 0;

   protected:
      DDS_stringDataReaderView () {};
      ~DDS_stringDataReaderView () {};
   private:
      DDS_stringDataReaderView (const DDS_stringDataReaderView &);
      DDS_stringDataReaderView & operator = (const DDS_stringDataReaderView &);
   };

}
template <>
DDS::BuiltinTopicKey_t_slice* DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::copy (DDS::BuiltinTopicKey_t_slice *to, const DDS::BuiltinTopicKey_t_slice* from);
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::free (DDS::BuiltinTopicKey_t_slice *ptr);




#endif 
