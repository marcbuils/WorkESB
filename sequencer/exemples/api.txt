###########
## API C ##
###########
int WESBMessenger_init( char* p_domain, char* p_name )
int WESBMessenger_regConsumSampling( char* p_name, void* p_value, int p_type )
int WESBMessenger_regProduceSampling( char* p_name, void* p_value, int p_type )
int WESBMessenger_regConsumQueuing( char* p_name, void* p_values, int *p_size, int p_type, int p_maxsize = WESBMESSENGER_MAX_QUEUEING_SIZE )
int WESBMessenger_regProduceQueuing( char* p_name, void* p_values, int *p_size, int p_type )
int WESBMessenger_share( char* p_name, Shared_Func p_function )
int WESBMessenger_call( char* p_name, char* p_params, CallBack_Func p_function )
int WESBMessenger_bind( char* p_name, Event_Func p_function )
int WESBMessenger_trigger( char* p_name, char* p_params )
int WESBMessenger_update( )
int WESBMessenger_unreg( )

Informations:
-------------
p_type = TYPE_INT ou TYPE_FLOAT ou TYPE_STRING
p_value = pointeur vers la variable de reception
p_size = pointeur vers la variable contenant la taille du tableau
Shared_Func p_function = pointeur vers une fonction de type "const char* (*Shared_Func)( char* p_param )"
CallBack_Func p_function = pointeur vers une fonction de type "void (*CallBack_Func)( char* p_param )"
Event_Func p_function = pointeur vers une fonction de type "void (*Event_Func)( char* p_param )"
p_params = chaine de caractère au format JSon


####################
## API JavaScript ##
####################
$(document).bind("wesbmessenger_update", p_function)
$.wesbmessenger.singleton().regConsumSampling = function( p_name, p_type )
$.wesbmessenger.singleton().regProduceSampling = function( p_name, p_type )
$.wesbmessenger.singleton().regConsumQueuing = function( p_name, p_type )
$.wesbmessenger.singleton().regProduceQueuing = function( p_name, p_type )
$.wesbmessenger.singleton().share = function( p_name, p_function )
$.wesbmessenger.singleton().call = function( p_name, p_params ) [.done( p_function )]
$.wesbmessenger.singleton().bind = function( p_name, p_function )
$.wesbmessenger.singleton().trigger = function( p_name, p_params )

Informations:
-------------
p_type = "int" ou "float" ou "string"
p_params = structure de données JavaScript
L'évènement "wesbmessenger_update" est appelé à chaque fois que les données sont rafraichies


#############
## API LUA ##
#############
wesbmessenger.init = function( p_domain, p_name )
wesbmessenger.update = function( )
wesbmessenger.unreg = function( )
wesbmessenger.regConsumSampling = function( p_name, p_variable, p_type )
wesbmessenger.regProduceSampling = function( p_name, p_variable, p_type )
wesbmessenger.regConsumQueuing = function( p_name, p_variable, p_type )
wesbmessenger.regProduceQueuing = function( p_name, p_variable, p_type )
wesbmessenger.share = function( p_name, p_function )
wesbmessenger.regCall = function( p_name, p_variable )
wesbmessenger.bind = function( p_name, p_function )
wesbmessenger.trigger = function( p_name, p_params )

Informations:
-------------
p_type = "int" ou "float" ou "string"
p_variable = chaine de caractère contenant le nom de la variable globale de reception
p_params = structure de données LUA
regCall retourne une fonction de type function( p_params, p_function )


######################
## API AUTOMATE LUA ##
######################
automate.sleep = function ( p_time )
automate.wait = function ( p_condition )
automate.assert = function ( p_condition )
automate.logs = function ( p_line )
automate.call = function ( p_name, p_params )
automate.trigger = function( p_name, p_params )
automate.alert = function( p_text, p_title )
automate.confirm = function( p_text, p_title )
automate.prompt = function( p_text, p_title )
