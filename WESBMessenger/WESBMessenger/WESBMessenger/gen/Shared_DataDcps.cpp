//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: Shared_DataDcps.cpp
//  Source: gen/Shared_DataDcps.idl
//  Generated: Wed Dec 28 14:17:29 2011
//  OpenSplice V5.4.1OSS
//  
//******************************************************************

#include "Shared_DataDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < Shared_Data::DDS_string, struct DDS_stringSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < Shared_Data::DDS_float, struct DDS_floatSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < Shared_Data::DDS_int, struct DDS_intSeq_uniq_>;
#endif

const char * Shared_Data::DDS_intTypeSupportInterface::_local_id = "IDL:Shared_Data/DDS_intTypeSupportInterface:1.0";

Shared_Data::DDS_intTypeSupportInterface_ptr Shared_Data::DDS_intTypeSupportInterface::_duplicate (Shared_Data::DDS_intTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Shared_Data::DDS_intTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, Shared_Data::DDS_intTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Shared_Data::DDS_intTypeSupportInterface_ptr Shared_Data::DDS_intTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_intTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (Shared_Data::DDS_intTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < Shared_Data::DDS_intTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

Shared_Data::DDS_intTypeSupportInterface_ptr Shared_Data::DDS_intTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_intTypeSupportInterface_ptr result;
   result = dynamic_cast < Shared_Data::DDS_intTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * Shared_Data::DDS_intDataWriter::_local_id = "IDL:Shared_Data/DDS_intDataWriter:1.0";

Shared_Data::DDS_intDataWriter_ptr Shared_Data::DDS_intDataWriter::_duplicate (Shared_Data::DDS_intDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Shared_Data::DDS_intDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, Shared_Data::DDS_intDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Shared_Data::DDS_intDataWriter_ptr Shared_Data::DDS_intDataWriter::_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_intDataWriter_ptr result = NULL;
   if (p && p->_is_a (Shared_Data::DDS_intDataWriter::_local_id))
   {
      result = dynamic_cast < Shared_Data::DDS_intDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

Shared_Data::DDS_intDataWriter_ptr Shared_Data::DDS_intDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_intDataWriter_ptr result;
   result = dynamic_cast < Shared_Data::DDS_intDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * Shared_Data::DDS_intDataReader::_local_id = "IDL:Shared_Data/DDS_intDataReader:1.0";

Shared_Data::DDS_intDataReader_ptr Shared_Data::DDS_intDataReader::_duplicate (Shared_Data::DDS_intDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Shared_Data::DDS_intDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, Shared_Data::DDS_intDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Shared_Data::DDS_intDataReader_ptr Shared_Data::DDS_intDataReader::_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_intDataReader_ptr result = NULL;
   if (p && p->_is_a (Shared_Data::DDS_intDataReader::_local_id))
   {
      result = dynamic_cast < Shared_Data::DDS_intDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

Shared_Data::DDS_intDataReader_ptr Shared_Data::DDS_intDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_intDataReader_ptr result;
   result = dynamic_cast < Shared_Data::DDS_intDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * Shared_Data::DDS_intDataReaderView::_local_id = "IDL:Shared_Data/DDS_intDataReaderView:1.0";

Shared_Data::DDS_intDataReaderView_ptr Shared_Data::DDS_intDataReaderView::_duplicate (Shared_Data::DDS_intDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Shared_Data::DDS_intDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, Shared_Data::DDS_intDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Shared_Data::DDS_intDataReaderView_ptr Shared_Data::DDS_intDataReaderView::_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_intDataReaderView_ptr result = NULL;
   if (p && p->_is_a (Shared_Data::DDS_intDataReaderView::_local_id))
   {
      result = dynamic_cast < Shared_Data::DDS_intDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

Shared_Data::DDS_intDataReaderView_ptr Shared_Data::DDS_intDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_intDataReaderView_ptr result;
   result = dynamic_cast < Shared_Data::DDS_intDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}

const char * Shared_Data::DDS_floatTypeSupportInterface::_local_id = "IDL:Shared_Data/DDS_floatTypeSupportInterface:1.0";

Shared_Data::DDS_floatTypeSupportInterface_ptr Shared_Data::DDS_floatTypeSupportInterface::_duplicate (Shared_Data::DDS_floatTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Shared_Data::DDS_floatTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, Shared_Data::DDS_floatTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Shared_Data::DDS_floatTypeSupportInterface_ptr Shared_Data::DDS_floatTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_floatTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (Shared_Data::DDS_floatTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < Shared_Data::DDS_floatTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

Shared_Data::DDS_floatTypeSupportInterface_ptr Shared_Data::DDS_floatTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_floatTypeSupportInterface_ptr result;
   result = dynamic_cast < Shared_Data::DDS_floatTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * Shared_Data::DDS_floatDataWriter::_local_id = "IDL:Shared_Data/DDS_floatDataWriter:1.0";

Shared_Data::DDS_floatDataWriter_ptr Shared_Data::DDS_floatDataWriter::_duplicate (Shared_Data::DDS_floatDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Shared_Data::DDS_floatDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, Shared_Data::DDS_floatDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Shared_Data::DDS_floatDataWriter_ptr Shared_Data::DDS_floatDataWriter::_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_floatDataWriter_ptr result = NULL;
   if (p && p->_is_a (Shared_Data::DDS_floatDataWriter::_local_id))
   {
      result = dynamic_cast < Shared_Data::DDS_floatDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

Shared_Data::DDS_floatDataWriter_ptr Shared_Data::DDS_floatDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_floatDataWriter_ptr result;
   result = dynamic_cast < Shared_Data::DDS_floatDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * Shared_Data::DDS_floatDataReader::_local_id = "IDL:Shared_Data/DDS_floatDataReader:1.0";

Shared_Data::DDS_floatDataReader_ptr Shared_Data::DDS_floatDataReader::_duplicate (Shared_Data::DDS_floatDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Shared_Data::DDS_floatDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, Shared_Data::DDS_floatDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Shared_Data::DDS_floatDataReader_ptr Shared_Data::DDS_floatDataReader::_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_floatDataReader_ptr result = NULL;
   if (p && p->_is_a (Shared_Data::DDS_floatDataReader::_local_id))
   {
      result = dynamic_cast < Shared_Data::DDS_floatDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

Shared_Data::DDS_floatDataReader_ptr Shared_Data::DDS_floatDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_floatDataReader_ptr result;
   result = dynamic_cast < Shared_Data::DDS_floatDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * Shared_Data::DDS_floatDataReaderView::_local_id = "IDL:Shared_Data/DDS_floatDataReaderView:1.0";

Shared_Data::DDS_floatDataReaderView_ptr Shared_Data::DDS_floatDataReaderView::_duplicate (Shared_Data::DDS_floatDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Shared_Data::DDS_floatDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, Shared_Data::DDS_floatDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Shared_Data::DDS_floatDataReaderView_ptr Shared_Data::DDS_floatDataReaderView::_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_floatDataReaderView_ptr result = NULL;
   if (p && p->_is_a (Shared_Data::DDS_floatDataReaderView::_local_id))
   {
      result = dynamic_cast < Shared_Data::DDS_floatDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

Shared_Data::DDS_floatDataReaderView_ptr Shared_Data::DDS_floatDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_floatDataReaderView_ptr result;
   result = dynamic_cast < Shared_Data::DDS_floatDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}

const char * Shared_Data::DDS_stringTypeSupportInterface::_local_id = "IDL:Shared_Data/DDS_stringTypeSupportInterface:1.0";

Shared_Data::DDS_stringTypeSupportInterface_ptr Shared_Data::DDS_stringTypeSupportInterface::_duplicate (Shared_Data::DDS_stringTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Shared_Data::DDS_stringTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, Shared_Data::DDS_stringTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Shared_Data::DDS_stringTypeSupportInterface_ptr Shared_Data::DDS_stringTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_stringTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (Shared_Data::DDS_stringTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < Shared_Data::DDS_stringTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

Shared_Data::DDS_stringTypeSupportInterface_ptr Shared_Data::DDS_stringTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_stringTypeSupportInterface_ptr result;
   result = dynamic_cast < Shared_Data::DDS_stringTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * Shared_Data::DDS_stringDataWriter::_local_id = "IDL:Shared_Data/DDS_stringDataWriter:1.0";

Shared_Data::DDS_stringDataWriter_ptr Shared_Data::DDS_stringDataWriter::_duplicate (Shared_Data::DDS_stringDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Shared_Data::DDS_stringDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, Shared_Data::DDS_stringDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Shared_Data::DDS_stringDataWriter_ptr Shared_Data::DDS_stringDataWriter::_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_stringDataWriter_ptr result = NULL;
   if (p && p->_is_a (Shared_Data::DDS_stringDataWriter::_local_id))
   {
      result = dynamic_cast < Shared_Data::DDS_stringDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

Shared_Data::DDS_stringDataWriter_ptr Shared_Data::DDS_stringDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_stringDataWriter_ptr result;
   result = dynamic_cast < Shared_Data::DDS_stringDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * Shared_Data::DDS_stringDataReader::_local_id = "IDL:Shared_Data/DDS_stringDataReader:1.0";

Shared_Data::DDS_stringDataReader_ptr Shared_Data::DDS_stringDataReader::_duplicate (Shared_Data::DDS_stringDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Shared_Data::DDS_stringDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, Shared_Data::DDS_stringDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Shared_Data::DDS_stringDataReader_ptr Shared_Data::DDS_stringDataReader::_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_stringDataReader_ptr result = NULL;
   if (p && p->_is_a (Shared_Data::DDS_stringDataReader::_local_id))
   {
      result = dynamic_cast < Shared_Data::DDS_stringDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

Shared_Data::DDS_stringDataReader_ptr Shared_Data::DDS_stringDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_stringDataReader_ptr result;
   result = dynamic_cast < Shared_Data::DDS_stringDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * Shared_Data::DDS_stringDataReaderView::_local_id = "IDL:Shared_Data/DDS_stringDataReaderView:1.0";

Shared_Data::DDS_stringDataReaderView_ptr Shared_Data::DDS_stringDataReaderView::_duplicate (Shared_Data::DDS_stringDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Shared_Data::DDS_stringDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, Shared_Data::DDS_stringDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Shared_Data::DDS_stringDataReaderView_ptr Shared_Data::DDS_stringDataReaderView::_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_stringDataReaderView_ptr result = NULL;
   if (p && p->_is_a (Shared_Data::DDS_stringDataReaderView::_local_id))
   {
      result = dynamic_cast < Shared_Data::DDS_stringDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

Shared_Data::DDS_stringDataReaderView_ptr Shared_Data::DDS_stringDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   Shared_Data::DDS_stringDataReaderView_ptr result;
   result = dynamic_cast < Shared_Data::DDS_stringDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}



